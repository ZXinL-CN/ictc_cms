import{d as Sr,o as wt,c as yt,k as Pr,H as Rr}from"./chunks/framework.3664abc7.js";function C(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&"version"in process?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}const Gr=Object.freeze(Object.defineProperty({__proto__:null,getUserAgent:C},Symbol.toStringTag,{value:"Module"}));var ge=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ke(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function V(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var r=function o(){return this instanceof o?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};r.prototype=t.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(e).forEach(function(o){var s=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(r,o,s.get?s:{enumerable:!0,get:function(){return e[o]}})}),r}var se={exports:{}},Ur=vt;function vt(e,t,r,o){if(typeof r!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(t)?t.reverse().reduce(function(s,i){return vt.bind(null,e,i,s,o)},r)():Promise.resolve().then(function(){return e.registry[t]?e.registry[t].reduce(function(s,i){return i.hook.bind(null,s,o)},r)():r(o)})}var Ir=Fr;function Fr(e,t,r,o){var s=o;e.registry[r]||(e.registry[r]=[]),t==="before"&&(o=function(i,u){return Promise.resolve().then(s.bind(null,u)).then(i.bind(null,u))}),t==="after"&&(o=function(i,u){var h;return Promise.resolve().then(i.bind(null,u)).then(function(g){return h=g,s(h,u)}).then(function(){return h})}),t==="error"&&(o=function(i,u){return Promise.resolve().then(i.bind(null,u)).catch(function(h){return s(h,u)})}),e.registry[r].push({hook:o,orig:s})}var Dr=Cr;function Cr(e,t,r){if(e.registry[t]){var o=e.registry[t].map(function(s){return s.orig}).indexOf(r);o!==-1&&e.registry[t].splice(o,1)}}var kt=Ur,Lr=Ir,jr=Dr,et=Function.bind,tt=et.bind(et);function Ot(e,t,r){var o=tt(jr,null).apply(null,r?[t,r]:[t]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(function(s){var i=r?[t,s,r]:[t,s];e[s]=e.api[s]=tt(Lr,null).apply(null,i)})}function $r(){var e="h",t={registry:{}},r=kt.bind(null,t,e);return Ot(r,t,e),r}function At(){var e={registry:{}},t=kt.bind(null,e);return Ot(t,e),t}var rt=!1;function z(){return rt||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),rt=!0),At()}z.Singular=$r.bind();z.Collection=At.bind();se.exports=z;se.exports.Hook=z;se.exports.Singular=z.Singular;var qr=se.exports.Collection=z.Collection;/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */function st(e){return Object.prototype.toString.call(e)==="[object Object]"}function St(e){var t,r;return st(e)===!1?!1:(t=e.constructor,t===void 0?!0:(r=t.prototype,!(st(r)===!1||r.hasOwnProperty("isPrototypeOf")===!1)))}var xr="9.0.2",Nr=`octokit-endpoint.js/${xr} ${C()}`,Hr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Nr},mediaType:{format:""}};function Br(e){return e?Object.keys(e).reduce((t,r)=>(t[r.toLowerCase()]=e[r],t),{}):{}}function Pt(e,t){const r=Object.assign({},e);return Object.keys(t).forEach(o=>{St(t[o])?o in e?r[o]=Pt(e[o],t[o]):Object.assign(r,{[o]:t[o]}):Object.assign(r,{[o]:t[o]})}),r}function ot(e){for(const t in e)e[t]===void 0&&delete e[t];return e}function fe(e,t,r){var s;if(typeof t=="string"){let[i,u]=t.split(" ");r=Object.assign(u?{method:i,url:u}:{url:i},r)}else r=Object.assign({},t);r.headers=Br(r.headers),ot(r),ot(r.headers);const o=Pt(e||{},r);return r.url==="/graphql"&&(e&&((s=e.mediaType.previews)!=null&&s.length)&&(o.mediaType.previews=e.mediaType.previews.filter(i=>!o.mediaType.previews.includes(i)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),o}function Wr(e,t){const r=/\?/.test(e)?"&":"?",o=Object.keys(t);return o.length===0?e:e+r+o.map(s=>s==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${s}=${encodeURIComponent(t[s])}`).join("&")}var Mr=/\{[^}]+\}/g;function Vr(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function zr(e){const t=e.match(Mr);return t?t.map(Vr).reduce((r,o)=>r.concat(o),[]):[]}function nt(e,t){return Object.keys(e).filter(r=>!t.includes(r)).reduce((r,o)=>(r[o]=e[o],r),{})}function Rt(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function B(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function Y(e,t,r){return t=e==="+"||e==="#"?Rt(t):B(t),r?B(r)+"="+t:t}function H(e){return e!=null}function me(e){return e===";"||e==="&"||e==="?"}function Kr(e,t,r,o){var s=e[r],i=[];if(H(s)&&s!=="")if(typeof s=="string"||typeof s=="number"||typeof s=="boolean")s=s.toString(),o&&o!=="*"&&(s=s.substring(0,parseInt(o,10))),i.push(Y(t,s,me(t)?r:""));else if(o==="*")Array.isArray(s)?s.filter(H).forEach(function(u){i.push(Y(t,u,me(t)?r:""))}):Object.keys(s).forEach(function(u){H(s[u])&&i.push(Y(t,s[u],u))});else{const u=[];Array.isArray(s)?s.filter(H).forEach(function(h){u.push(Y(t,h))}):Object.keys(s).forEach(function(h){H(s[h])&&(u.push(B(h)),u.push(Y(t,s[h].toString())))}),me(t)?i.push(B(r)+"="+u.join(",")):u.length!==0&&i.push(u.join(","))}else t===";"?H(s)&&i.push(B(r)):s===""&&(t==="&"||t==="?")?i.push(B(r)+"="):s===""&&i.push("");return i}function Jr(e){return{expand:Xr.bind(null,e)}}function Xr(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,s,i){if(s){let h="";const g=[];if(r.indexOf(s.charAt(0))!==-1&&(h=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(E){var T=/([^:\*]*)(?::(\d+)|(\*))?/.exec(E);g.push(Kr(t,h,T[1],T[2]||T[3]))}),h&&h!=="+"){var u=",";return h==="?"?u="&":h!=="#"&&(u=h),(g.length!==0?h:"")+g.join(u)}else return g.join(",")}else return Rt(i)}),e==="/"?e:e.replace(/\/$/,"")}function Gt(e){var T;let t=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),s,i=nt(e,["method","baseUrl","url","headers","request","mediaType"]);const u=zr(r);r=Jr(r).expand(i),/^http/.test(r)||(r=e.baseUrl+r);const h=Object.keys(e).filter(f=>u.includes(f)).concat("baseUrl"),g=nt(i,h);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(f=>f.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&(T=e.mediaType.previews)!=null&&T.length)){const f=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=f.concat(e.mediaType.previews).map(S=>{const P=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${S}-preview${P}`}).join(",")}return["GET","HEAD"].includes(t)?r=Wr(r,g):"data"in g?s=g.data:Object.keys(g).length&&(s=g),!o["content-type"]&&typeof s<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof s>"u"&&(s=""),Object.assign({method:t,url:r,headers:o},typeof s<"u"?{body:s}:null,e.request?{request:e.request}:null)}function Yr(e,t,r){return Gt(fe(e,t,r))}function Ut(e,t){const r=fe(e,t),o=Yr.bind(null,r);return Object.assign(o,{DEFAULTS:r,defaults:Ut.bind(null,r),merge:fe.bind(null,r),parse:Gt})}var Qr=Ut(null,Hr);class it extends Error{constructor(t){super(t),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var Oe={exports:{}},Zr=It;function It(e,t){if(e&&t)return It(e)(t);if(typeof e!="function")throw new TypeError("need wrapper function");return Object.keys(e).forEach(function(o){r[o]=e[o]}),r;function r(){for(var o=new Array(arguments.length),s=0;s<o.length;s++)o[s]=arguments[s];var i=e.apply(this,o),u=o[o.length-1];return typeof i=="function"&&i!==u&&Object.keys(u).forEach(function(h){i[h]=u[h]}),i}}var Ft=Zr;Oe.exports=Ft(re);Oe.exports.strict=Ft(Dt);re.proto=re(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return re(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return Dt(this)},configurable:!0})});function re(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function Dt(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},r=e.name||"Function wrapped with `once`";return t.onceError=r+" shouldn't be called more than once",t.called=!1,t}var es=Oe.exports;const Ct=ke(es);var ts=Ct(e=>console.warn(e)),rs=Ct(e=>console.warn(e)),$=class extends Error{constructor(e,t,r){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t;let o;"headers"in r&&typeof r.headers<"u"&&(o=r.headers),"response"in r&&(this.response=r.response,o=r.response.headers);const s=Object.assign({},r.request);r.request.headers.authorization&&(s.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),s.url=s.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=s,Object.defineProperty(this,"code",{get(){return ts(new it("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),t}}),Object.defineProperty(this,"headers",{get(){return rs(new it("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),o||{}}})}},ss="8.1.4";function os(e){return e.arrayBuffer()}function at(e){var h,g,E;const t=e.request&&e.request.log?e.request.log:console,r=((h=e.request)==null?void 0:h.parseSuccessResponseBody)!==!1;(St(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let o={},s,i,{fetch:u}=globalThis;if((g=e.request)!=null&&g.fetch&&(u=e.request.fetch),!u)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return u(e.url,{method:e.method,body:e.body,headers:e.headers,signal:(E=e.request)==null?void 0:E.signal,...e.body&&{duplex:"half"}}).then(async T=>{i=T.url,s=T.status;for(const f of T.headers)o[f[0]]=f[1];if("deprecation"in o){const f=o.link&&o.link.match(/<([^>]+)>; rel="deprecation"/),S=f&&f.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${o.sunset}${S?`. See ${S}`:""}`)}if(!(s===204||s===205)){if(e.method==="HEAD"){if(s<400)return;throw new $(T.statusText,s,{response:{url:i,status:s,headers:o,data:void 0},request:e})}if(s===304)throw new $("Not modified",s,{response:{url:i,status:s,headers:o,data:await _e(T)},request:e});if(s>=400){const f=await _e(T);throw new $(ns(f),s,{response:{url:i,status:s,headers:o,data:f},request:e})}return r?await _e(T):T.body}}).then(T=>({status:s,url:i,headers:o,data:T})).catch(T=>{if(T instanceof $)throw T;if(T.name==="AbortError")throw T;let f=T.message;throw T.name==="TypeError"&&"cause"in T&&(T.cause instanceof Error?f=T.cause.message:typeof T.cause=="string"&&(f=T.cause)),new $(f,500,{request:e})})}async function _e(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json():!t||/^text\/|charset=utf-8$/.test(t)?e.text():os(e)}function ns(e){return typeof e=="string"?e:"message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}`:e.message:`Unknown error: ${JSON.stringify(e)}`}function be(e,t){const r=e.defaults(t);return Object.assign(function(s,i){const u=r.merge(s,i);if(!u.request||!u.request.hook)return at(r.parse(u));const h=(g,E)=>at(r.parse(r.merge(g,E)));return Object.assign(h,{endpoint:r,defaults:be.bind(null,r)}),u.request.hook(h,u)},{endpoint:r,defaults:be.bind(null,r)})}var O=be(Qr,{headers:{"user-agent":`octokit-request.js/${ss} ${C()}`}}),is="7.0.2";function as(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var cs=class extends Error{constructor(e,t,r){super(as(r)),this.request=e,this.headers=t,this.response=r,this.name="GraphqlResponseError",this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},us=["method","baseUrl","url","headers","request","query","mediaType"],ls=["query","method","url"],ct=/\/api\/v3\/?$/;function ps(e,t,r){if(r){if(typeof t=="string"&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const u in r)if(ls.includes(u))return Promise.reject(new Error(`[@octokit/graphql] "${u}" cannot be used as variable name`))}const o=typeof t=="string"?Object.assign({query:t},r):t,s=Object.keys(o).reduce((u,h)=>us.includes(h)?(u[h]=o[h],u):(u.variables||(u.variables={}),u.variables[h]=o[h],u),{}),i=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return ct.test(i)&&(s.url=i.replace(ct,"/api/graphql")),e(s).then(u=>{if(u.data.errors){const h={};for(const g of Object.keys(u.headers))h[g]=u.headers[g];throw new cs(s,h,u.data)}return u.data.data})}function Ae(e,t){const r=e.defaults(t);return Object.assign((s,i)=>ps(r,s,i),{defaults:Ae.bind(null,r),endpoint:r.endpoint})}Ae(O,{headers:{"user-agent":`octokit-graphql.js/${is} ${C()}`},method:"POST",url:"/graphql"});function ds(e){return Ae(e,{method:"POST",url:"/graphql"})}var hs=/^v1\./,gs=/^ghs_/,ms=/^ghu_/;async function _s(e){const t=e.split(/\./).length===3,r=hs.test(e)||gs.test(e),o=ms.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":o?"user-to-server":"oauth"}}function Ts(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function Es(e,t,r,o){const s=t.endpoint.merge(r,o);return s.headers.authorization=Ts(e),t(s)}var fs=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(_s.bind(null,t),{hook:Es.bind(null,t)})},ut="5.0.1",M,Lt=(M=class{static defaults(t){return class extends this{constructor(...o){const s=o[0]||{};if(typeof t=="function"){super(t(s));return}super(Object.assign({},t,s,s.userAgent&&t.userAgent?{userAgent:`${s.userAgent} ${t.userAgent}`}:null))}}}static plugin(...t){var s;const r=this.plugins;return s=class extends this{},s.plugins=r.concat(t.filter(u=>!r.includes(u))),s}constructor(t={}){const r=new qr,o={baseUrl:O.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=[t.userAgent,`octokit-core.js/${ut} ${C()}`].filter(Boolean).join(" "),t.baseUrl&&(o.baseUrl=t.baseUrl),t.previews&&(o.mediaType.previews=t.previews),t.timeZone&&(o.headers["time-zone"]=t.timeZone),this.request=O.defaults(o),this.graphql=ds(this.request).defaults(o),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},t.log),this.hook=r,t.authStrategy){const{authStrategy:i,...u}=t,h=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:u},t.auth));r.wrap("request",h.hook),this.auth=h}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=fs(t.auth);r.wrap("request",i.hook),this.auth=i}this.constructor.plugins.forEach(i=>{Object.assign(this,i(this,t))})}},M.VERSION=ut,M.plugins=[],M);const bs=Object.freeze(Object.defineProperty({__proto__:null,Octokit:Lt},Symbol.toStringTag,{value:"Module"}));var ws="9.1.2";function ys(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const r=e.data.incomplete_results,o=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],u=e.data[i];return e.data=u,typeof r<"u"&&(e.data.incomplete_results=r),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=s,e}function Se(e,t,r){const o=typeof t=="function"?t.endpoint(r):e.request.endpoint(t,r),s=typeof t=="function"?t:e.request,i=o.method,u=o.headers;let h=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!h)return{done:!0};try{const g=await s({method:i,url:h,headers:u}),E=ys(g);return h=((E.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:E}}catch(g){if(g.status!==409)throw g;return h="",{value:{status:200,headers:{},data:[]}}}}})}}function jt(e,t,r,o){return typeof r=="function"&&(o=r,r=void 0),$t(e,[],Se(e,t,r)[Symbol.asyncIterator](),o)}function $t(e,t,r,o){return r.next().then(s=>{if(s.done)return t;let i=!1;function u(){i=!0}return t=t.concat(o?o(s.value,u):s.value.data),i?t:$t(e,t,r,o)})}Object.assign(jt,{iterator:Se});function qt(e){return{paginate:Object.assign(jt.bind(null,e),{iterator:Se.bind(null,e)})}}qt.VERSION=ws;var vs=(e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`,ks=class extends Error{constructor(e,t){super(vs(e.pathInQuery,t)),this.pageInfo=e,this.cursorValue=t,this.name="MissingCursorChangeError",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Os=class extends Error{constructor(e){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(e,null,2)}`),this.response=e,this.name="MissingPageInfo",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},As=e=>Object.prototype.toString.call(e)==="[object Object]";function xt(e){const t=Nt(e,"pageInfo");if(t.length===0)throw new Os(e);return t}var Nt=(e,t,r=[])=>{for(const o of Object.keys(e)){const s=[...r,o],i=e[o];if(i.hasOwnProperty(t))return s;if(As(i)){const u=Nt(i,t,s);if(u.length>0)return u}}return[]},Q=(e,t)=>t.reduce((r,o)=>r[o],e),Te=(e,t,r)=>{const o=t[t.length-1],s=[...t].slice(0,-1),i=Q(e,s);typeof r=="function"?i[o]=r(i[o]):i[o]=r},Ss=e=>{const t=xt(e);return{pathInQuery:t,pageInfo:Q(e,[...t,"pageInfo"])}},Ht=e=>e.hasOwnProperty("hasNextPage"),Ps=e=>Ht(e)?e.endCursor:e.startCursor,Rs=e=>Ht(e)?e.hasNextPage:e.hasPreviousPage,Bt=e=>(t,r={})=>{let o=!0,s={...r};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const i=await e.graphql(t,s),u=Ss(i),h=Ps(u.pageInfo);if(o=Rs(u.pageInfo),o&&h===s.cursor)throw new ks(u,h);return s={...s,cursor:h},{done:!1,value:i}}})}},Gs=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);const r=xt(e),o=[...r,"nodes"],s=Q(t,o);s&&Te(e,o,g=>[...g,...s]);const i=[...r,"edges"],u=Q(t,i);u&&Te(e,i,g=>[...g,...u]);const h=[...r,"pageInfo"];return Te(e,h,Q(t,h)),e},Us=e=>{const t=Bt(e);return async(r,o={})=>{let s={};for await(const i of t(r,o))s=Gs(s,i);return s}};function Is(e){return e.graphql,{graphql:Object.assign(e.graphql,{paginate:Object.assign(Us(e),{iterator:Bt(e)})})}}var Fs="10.1.2",Ds={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repositories/{repository_id}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repositories/{repository_id}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotForBusinessSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotForBusinessSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import",{},{deprecated:"octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import"}],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors",{},{deprecated:"octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors"}],getImportStatus:["GET /repos/{owner}/{repo}/import",{},{deprecated:"octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status"}],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files",{},{deprecated:"octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files"}],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}",{},{deprecated:"octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"}],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs",{},{deprecated:"octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import",{},{deprecated:"octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import"}],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import",{},{deprecated:"octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import"}]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},Cs=Ds,q=new Map;for(const[e,t]of Object.entries(Cs))for(const[r,o]of Object.entries(t)){const[s,i,u]=o,[h,g]=s.split(/ /),E=Object.assign({method:h,url:g},i);q.has(e)||q.set(e,new Map),q.get(e).set(r,{scope:e,methodName:r,endpointDefaults:E,decorations:u})}var Ls={has({scope:e},t){return q.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,r){return Object.defineProperty(e.cache,t,r),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...q.get(e).keys()]},set(e,t,r){return e.cache[t]=r},get({octokit:e,scope:t,cache:r},o){if(r[o])return r[o];const s=q.get(t).get(o);if(!s)return;const{endpointDefaults:i,decorations:u}=s;return u?r[o]=$s(e,t,o,i,u):r[o]=e.request.defaults(i),r[o]}};function js(e){const t={};for(const r of q.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},Ls);return t}function $s(e,t,r,o,s){const i=e.request.defaults(o);function u(...h){let g=i.endpoint.merge(...h);if(s.mapToData)return g=Object.assign({},g,{data:g[s.mapToData],[s.mapToData]:void 0}),i(g);if(s.renamed){const[E,T]=s.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${E}.${T}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const E=i.endpoint.merge(...h);for(const[T,f]of Object.entries(s.renamedParameters))T in E&&(e.log.warn(`"${T}" parameter is deprecated for "octokit.${t}.${r}()". Use "${f}" instead`),f in E||(E[f]=E[T]),delete E[T]);return i(E)}return i(...h)}return Object.assign(u,i)}function Wt(e){return{rest:js(e)}}Wt.VERSION=Fs;var Mt={exports:{}};(function(e,t){(function(r,o){e.exports=o()})(ge,function(){var r=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof ge<"u"?ge:typeof self<"u"?self:{};function o(_){return _&&_.default||_}var s=function(_,a,n={}){var c,l,p;for(c in a)p=a[c],n[c]=(l=_[c])!=null?l:p;return n},i=function(_,a,n={}){var c,l;for(c in _)l=_[c],a[c]!==void 0&&(n[c]=l);return n},u={load:s,overwrite:i},h;h=class{constructor(a,n){this.incr=a,this.decr=n,this._first=null,this._last=null,this.length=0}push(a){var n;this.length++,typeof this.incr=="function"&&this.incr(),n={value:a,prev:this._last,next:null},this._last!=null?(this._last.next=n,this._last=n):this._first=this._last=n}shift(){var a;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),a=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,a}first(){if(this._first!=null)return this._first.value}getArray(){var a,n,c;for(a=this._first,c=[];a!=null;)c.push((n=a,a=a.next,n.value));return c}forEachShift(a){var n;for(n=this.shift();n!=null;)a(n),n=this.shift()}debug(){var a,n,c,l,p;for(a=this._first,p=[];a!=null;)p.push((n=a,a=a.next,{value:n.value,prev:(c=n.prev)!=null?c.value:void 0,next:(l=n.next)!=null?l.value:void 0}));return p}};var g=h,E;E=class{constructor(a){if(this.instance=a,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(n,c)=>this._addListener(n,"many",c),this.instance.once=(n,c)=>this._addListener(n,"once",c),this.instance.removeAllListeners=(n=null)=>n!=null?delete this._events[n]:this._events={}}_addListener(a,n,c){var l;return(l=this._events)[a]==null&&(l[a]=[]),this._events[a].push({cb:c,status:n}),this.instance}listenerCount(a){return this._events[a]!=null?this._events[a].length:0}async trigger(a,...n){var c,l;try{return a!=="debug"&&this.trigger("debug",`Event triggered: ${a}`,n),this._events[a]==null?void 0:(this._events[a]=this._events[a].filter(function(p){return p.status!=="none"}),l=this._events[a].map(async p=>{var d,m;if(p.status!=="none"){p.status==="once"&&(p.status="none");try{return m=typeof p.cb=="function"?p.cb(...n):void 0,typeof(m!=null?m.then:void 0)=="function"?await m:m}catch(b){return d=b,this.trigger("error",d),null}}}),(await Promise.all(l)).find(function(p){return p!=null}))}catch(p){return c=p,this.trigger("error",c),null}}};var T=E,f,S,P;f=g,S=T,P=class{constructor(a){this.Events=new S(this),this._length=0,this._lists=(function(){var n,c,l;for(l=[],n=1,c=a;1<=c?n<=c:n>=c;1<=c?++n:--n)l.push(new f(()=>this.incr(),()=>this.decr()));return l}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(a){return this._lists[a.options.priority].push(a)}queued(a){return a!=null?this._lists[a].length:this._length}shiftAll(a){return this._lists.forEach(function(n){return n.forEachShift(a)})}getFirst(a=this._lists){var n,c,l;for(n=0,c=a.length;n<c;n++)if(l=a[n],l.length>0)return l;return[]}shiftLastFrom(a){return this.getFirst(this._lists.slice(a).reverse()).shift()}};var F=P,R;R=class extends Error{};var A=R,w,y,G,K,J;K=10,y=5,J=u,w=A,G=class{constructor(a,n,c,l,p,d,m,b){this.task=a,this.args=n,this.rejectOnDrop=p,this.Events=d,this._states=m,this.Promise=b,this.options=J.load(c,l),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===l.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((v,k)=>{this._resolve=v,this._reject=k}),this.retryCount=0}_sanitizePriority(a){var n;return n=~~a!==a?y:a,n<0?0:n>K-1?K-1:n}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:a,message:n="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(a??new w(n)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(a){var n;if(n=this._states.jobStatus(this.options.id),!(n===a||a==="DONE"&&n===null))throw new w(`Invalid job status ${n}, expected ${a}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(a,n){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:a,blocked:n})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(a,n,c,l){var p,d,m;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",d);try{if(m=await(a!=null?a.schedule(this.options,this.task,...this.args):this.task(...this.args)),n())return this.doDone(d),await l(this.options,d),this._assertStatus("DONE"),this._resolve(m)}catch(b){return p=b,this._onFailure(p,d,n,c,l)}}doExpire(a,n,c){var l,p;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),p={args:this.args,options:this.options,retryCount:this.retryCount},l=new w(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(l,p,a,n,c)}async _onFailure(a,n,c,l,p){var d,m;if(c())return d=await this.Events.trigger("failed",a,n),d!=null?(m=~~d,this.Events.trigger("retry",`Retrying ${this.options.id} after ${m} ms`,n),this.retryCount++,l(m)):(this.doDone(n),await p(this.options,n),this._assertStatus("DONE"),this._reject(a))}doDone(a){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",a)}};var D=G,N,ce,ue;ue=u,N=A,ce=class{constructor(a,n,c){this.instance=a,this.storeOptions=n,this.clientId=this.instance._randomIndex(),ue.load(c,c,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var a;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(a=this.heartbeat=setInterval(()=>{var n,c,l,p,d;if(p=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&p>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=p,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&p>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:n,reservoirIncreaseMaximum:l,reservoir:d}=this.storeOptions,this._lastReservoirIncrease=p,c=l!=null?Math.min(n,l-d):n,c>0))return this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?a.unref():void 0:clearInterval(this.heartbeat)}async __publish__(a){return await this.yieldLoop(),this.instance.Events.trigger("message",a.toString())}async __disconnect__(a){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(a=0){return new this.Promise(function(n,c){return setTimeout(n,a)})}computePenalty(){var a;return(a=this.storeOptions.penalty)!=null?a:15*this.storeOptions.minTime||5e3}async __updateSettings__(a){return await this.yieldLoop(),ue.overwrite(a,a,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(a){return await this.yieldLoop(),this._nextRequest+this.timeout<a}computeCapacity(){var a,n;return{maxConcurrent:a,reservoir:n}=this.storeOptions,a!=null&&n!=null?Math.min(a-this._running,n):a!=null?a-this._running:n??null}conditionsCheck(a){var n;return n=this.computeCapacity(),n==null||a<=n}async __incrementReservoir__(a){var n;return await this.yieldLoop(),n=this.storeOptions.reservoir+=a,this.instance._drainAll(this.computeCapacity()),n}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(a){return this._unblockTime>=a}check(a,n){return this.conditionsCheck(a)&&this._nextRequest-n<=0}async __check__(a){var n;return await this.yieldLoop(),n=Date.now(),this.check(a,n)}async __register__(a,n,c){var l,p;return await this.yieldLoop(),l=Date.now(),this.conditionsCheck(n)?(this._running+=n,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=n),p=Math.max(this._nextRequest-l,0),this._nextRequest=l+p+this.storeOptions.minTime,{success:!0,wait:p,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(a,n){var c,l,p;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&n>this.storeOptions.maxConcurrent)throw new N(`Impossible to add a job having a weight of ${n} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return l=Date.now(),p=this.storeOptions.highWater!=null&&a===this.storeOptions.highWater&&!this.check(n,l),c=this.strategyIsBlock()&&(p||this.isBlocked(l)),c&&(this._unblockTime=l+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:p,blocked:c,strategy:this.storeOptions.strategy}}async __free__(a,n){return await this.yieldLoop(),this._running-=n,this._done+=n,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var mr=ce,Ge,Ue;Ge=A,Ue=class{constructor(a){this.status=a,this._jobs={},this.counts=this.status.map(function(){return 0})}next(a){var n,c;if(n=this._jobs[a],c=n+1,n!=null&&c<this.status.length)return this.counts[n]--,this.counts[c]++,this._jobs[a]++;if(n!=null)return this.counts[n]--,delete this._jobs[a]}start(a){var n;return n=0,this._jobs[a]=n,this.counts[n]++}remove(a){var n;return n=this._jobs[a],n!=null&&(this.counts[n]--,delete this._jobs[a]),n!=null}jobStatus(a){var n;return(n=this.status[this._jobs[a]])!=null?n:null}statusJobs(a){var n,c,l,p,d;if(a!=null){if(c=this.status.indexOf(a),c<0)throw new Ge(`status must be one of ${this.status.join(", ")}`);l=this._jobs,p=[];for(n in l)d=l[n],d===c&&p.push(n);return p}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((a,n,c)=>(a[this.status[c]]=n,a),{})}};var _r=Ue,Ie,Fe;Ie=g,Fe=class{constructor(a,n){this.schedule=this.schedule.bind(this),this.name=a,this.Promise=n,this._running=0,this._queue=new Ie}isEmpty(){return this._queue.length===0}async _tryToRun(){var a,n,c,l,p,d,m;if(this._running<1&&this._queue.length>0)return this._running++,{task:m,args:a,resolve:p,reject:l}=this._queue.shift(),n=await async function(){try{return d=await m(...a),function(){return p(d)}}catch(b){return c=b,function(){return l(c)}}}(),this._running--,this._tryToRun(),n()}schedule(a,...n){var c,l,p;return p=l=null,c=new this.Promise(function(d,m){return p=d,l=m}),this._queue.push({task:a,args:n,resolve:p,reject:l}),this._tryToRun(),c}};var Tr=Fe,De="2.19.5",Er={version:De},fr=Object.freeze({version:De,default:Er}),Ce=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Le=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),br=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),je,$e,qe,xe,Ne,te;te=u,je=T,xe=Ce,qe=Le,Ne=br,$e=(function(){class _{constructor(n={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=n,te.load(this.limiterOptions,this.defaults,this),this.Events=new je(this),this.instances={},this.Bottleneck=Qe,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new xe(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new qe(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(n=""){var c;return(c=this.instances[n])!=null?c:(()=>{var l;return l=this.instances[n]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${n}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",l,n),l})()}async deleteKey(n=""){var c,l;return l=this.instances[n],this.connection&&(c=await this.connection.__runCommand__(["del",...Ne.allKeys(`${this.id}-${n}`)])),l!=null&&(delete this.instances[n],await l.disconnect()),l!=null||c>0}limiters(){var n,c,l,p;c=this.instances,l=[];for(n in c)p=c[n],l.push({key:n,limiter:p});return l}keys(){return Object.keys(this.instances)}async clusterKeys(){var n,c,l,p,d,m,b,v,k;if(this.connection==null)return this.Promise.resolve(this.keys());for(m=[],n=null,k=`b_${this.id}-`.length,c=9;n!==0;)for([v,l]=await this.connection.__runCommand__(["scan",n??0,"match",`b_${this.id}-*_settings`,"count",1e4]),n=~~v,p=0,b=l.length;p<b;p++)d=l[p],m.push(d.slice(k,-c));return m}_startAutoCleanup(){var n;return clearInterval(this.interval),typeof(n=this.interval=setInterval(async()=>{var c,l,p,d,m,b;m=Date.now(),p=this.instances,d=[];for(l in p){b=p[l];try{await b._store.__groupCheck__(m)?d.push(this.deleteKey(l)):d.push(void 0)}catch(v){c=v,d.push(b.Events.trigger("error",c))}}return d},this.timeout/2)).unref=="function"?n.unref():void 0}updateSettings(n={}){if(te.overwrite(n,this.defaults,this),te.overwrite(n,n,this.limiterOptions),n.timeout!=null)return this._startAutoCleanup()}disconnect(n=!0){var c;if(!this.sharedConnection)return(c=this.connection)!=null?c.disconnect(n):void 0}}return _.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},_}).call(r);var wr=$e,He,Be,We;We=u,Be=T,He=(function(){class _{constructor(n={}){this.options=n,We.load(this.options,this.defaults,this),this.Events=new Be(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((n,c)=>this._resolve=n)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(n){var c;return this._arr.push(n),c=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),c}}return _.prototype.defaults={maxTime:null,maxSize:null,Promise},_}).call(r);var yr=He,vr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),kr=o(fr),Me,Ve,le,pe,ze,de,Ke,Je,Xe,he,U,Ye=[].splice;de=10,Ve=5,U=u,Ke=F,pe=D,ze=mr,Je=vr,le=T,Xe=_r,he=Tr,Me=(function(){class _{constructor(n={},...c){var l,p;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(n,c),U.load(n,this.instanceDefaults,this),this._queues=new Ke(de),this._scheduled={},this._states=new Xe(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new le(this),this._submitLock=new he("submit",this.Promise),this._registerLock=new he("register",this.Promise),p=U.load(n,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return l=U.load(n,this.redisStoreDefaults,{}),new Je(this,p,l);if(this.datastore==="local")return l=U.load(n,this.localStoreDefaults,{}),new ze(this,p,l);throw new _.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.ref=="function"?d.ref():void 0}),this._queues.on("zero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.unref=="function"?d.unref():void 0})}_validateOptions(n,c){if(!(n!=null&&typeof n=="object"&&c.length===0))throw new _.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(n){return this._store.__publish__(n)}disconnect(n=!0){return this._store.__disconnect__(n)}chain(n){return this._limiter=n,this}queued(n){return this._queues.queued(n)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(n){return this._states.jobStatus(n)}jobs(n){return this._states.statusJobs(n)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(n=1){return this._store.__check__(n)}_clearGlobalState(n){return this._scheduled[n]!=null?(clearTimeout(this._scheduled[n].expiration),delete this._scheduled[n],!0):!1}async _free(n,c,l,p){var d,m;try{if({running:m}=await this._store.__free__(n,l.weight),this.Events.trigger("debug",`Freed ${l.id}`,p),m===0&&this.empty())return this.Events.trigger("idle")}catch(b){return d=b,this.Events.trigger("error",d)}}_run(n,c,l){var p,d,m;return c.doRun(),p=this._clearGlobalState.bind(this,n),m=this._run.bind(this,n,c),d=this._free.bind(this,n,c),this._scheduled[n]={timeout:setTimeout(()=>c.doExecute(this._limiter,p,m,d),l),expiration:c.options.expiration!=null?setTimeout(function(){return c.doExpire(p,m,d)},l+c.options.expiration):void 0,job:c}}_drainOne(n){return this._registerLock.schedule(()=>{var c,l,p,d,m;return this.queued()===0?this.Promise.resolve(null):(m=this._queues.getFirst(),{options:d,args:c}=p=m.first(),n!=null&&d.weight>n?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${d.id}`,{args:c,options:d}),l=this._randomIndex(),this._store.__register__(l,d.weight,d.expiration).then(({success:b,wait:v,reservoir:k})=>{var X;return this.Events.trigger("debug",`Drained ${d.id}`,{success:b,args:c,options:d}),b?(m.shift(),X=this.empty(),X&&this.Events.trigger("empty"),k===0&&this.Events.trigger("depleted",X),this._run(l,p,v),this.Promise.resolve(d.weight)):this.Promise.resolve(null)})))})}_drainAll(n,c=0){return this._drainOne(n).then(l=>{var p;return l!=null?(p=n!=null?n-l:n,this._drainAll(p,c+l)):this.Promise.resolve(c)}).catch(l=>this.Events.trigger("error",l))}_dropAllQueued(n){return this._queues.shiftAll(function(c){return c.doDrop({message:n})})}stop(n={}){var c,l;return n=U.load(n,this.stopDefaults),l=p=>{var d;return d=()=>{var m;return m=this._states.counts,m[0]+m[1]+m[2]+m[3]===p},new this.Promise((m,b)=>d()?m():this.on("done",()=>{if(d())return this.removeAllListeners("done"),m()}))},c=n.dropWaitingJobs?(this._run=function(p,d){return d.doDrop({message:n.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var p,d,m;d=this._scheduled;for(p in d)m=d[p],this.jobStatus(m.job.options.id)==="RUNNING"&&(clearTimeout(m.timeout),clearTimeout(m.expiration),m.job.doDrop({message:n.dropErrorMessage}));return this._dropAllQueued(n.dropErrorMessage),l(0)}))):this.schedule({priority:de-1,weight:0},()=>l(1)),this._receive=function(p){return p._reject(new _.prototype.BottleneckError(n.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new _.prototype.BottleneckError("stop() has already been called")),c}async _addToQueue(n){var c,l,p,d,m,b,v;({args:c,options:d}=n);try{({reachedHWM:m,blocked:l,strategy:v}=await this._store.__submit__(this.queued(),d.weight))}catch(k){return p=k,this.Events.trigger("debug",`Could not queue ${d.id}`,{args:c,options:d,error:p}),n.doDrop({error:p}),!1}return l?(n.doDrop(),!0):m&&(b=v===_.prototype.strategy.LEAK?this._queues.shiftLastFrom(d.priority):v===_.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(d.priority+1):v===_.prototype.strategy.OVERFLOW?n:void 0,b!=null&&b.doDrop(),b==null||v===_.prototype.strategy.OVERFLOW)?(b==null&&n.doDrop(),m):(n.doQueue(m,l),this._queues.push(n),await this._drainAll(),m)}_receive(n){return this._states.jobStatus(n.options.id)!=null?(n._reject(new _.prototype.BottleneckError(`A job with the same id already exists (id=${n.options.id})`)),!1):(n.doReceive(),this._submitLock.schedule(this._addToQueue,n))}submit(...n){var c,l,p,d,m,b,v;return typeof n[0]=="function"?(m=n,[l,...n]=m,[c]=Ye.call(n,-1),d=U.load({},this.jobDefaults)):(b=n,[d,l,...n]=b,[c]=Ye.call(n,-1),d=U.load(d,this.jobDefaults)),v=(...k)=>new this.Promise(function(X,Ar){return l(...k,function(...Ze){return(Ze[0]!=null?Ar:X)(Ze)})}),p=new pe(v,n,d,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),p.promise.then(function(k){return typeof c=="function"?c(...k):void 0}).catch(function(k){return Array.isArray(k)?typeof c=="function"?c(...k):void 0:typeof c=="function"?c(k):void 0}),this._receive(p)}schedule(...n){var c,l,p;return typeof n[0]=="function"?([p,...n]=n,l={}):[l,p,...n]=n,c=new pe(p,n,l,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(c),c.promise}wrap(n){var c,l;return c=this.schedule.bind(this),l=function(...p){return c(n.bind(this),...p)},l.withOptions=function(p,...d){return c(p,n,...d)},l}async updateSettings(n={}){return await this._store.__updateSettings__(U.overwrite(n,this.storeDefaults)),U.overwrite(n,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(n=0){return this._store.__incrementReservoir__(n)}}return _.default=_,_.Events=le,_.version=_.prototype.version=kr.version,_.strategy=_.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},_.BottleneckError=_.prototype.BottleneckError=A,_.Group=_.prototype.Group=wr,_.RedisConnection=_.prototype.RedisConnection=Ce,_.IORedisConnection=_.prototype.IORedisConnection=Le,_.Batcher=_.prototype.Batcher=yr,_.prototype.jobDefaults={priority:Ve,weight:1,expiration:null,id:"<no-id>"},_.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:_.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},_.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},_.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},_.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},_.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},_}).call(r);var Qe=Me,Or=Qe;return Or})})(Mt);var qs=Mt.exports;const Vt=ke(qs);async function zt(e,t,r,o){if(!r.request||!r.request.request)throw r;if(r.status>=400&&!e.doNotRetry.includes(r.status)){const s=o.request.retries!=null?o.request.retries:e.retries,i=Math.pow((o.request.retryCount||0)+1,2);throw t.retry.retryRequest(r,s,i)}throw r}async function xs(e,t,r,o){const s=new Vt;return s.on("failed",function(i,u){const h=~~i.request.request.retries,g=~~i.request.request.retryAfter;if(o.request.retryCount=u.retryCount+1,h>u.retryCount)return g*e.retryAfterBaseValue}),s.schedule(Ns.bind(null,e,t,r),o)}async function Ns(e,t,r,o){const s=await r(r,o);if(s.data&&s.data.errors&&/Something went wrong while executing your query/.test(s.data.errors[0].message)){const i=new $(s.data.errors[0].message,500,{request:o,response:s});return zt(e,t,i,o)}return s}var Hs="6.0.1";function Kt(e,t){const r=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},t.retry);return r.enabled&&(e.hook.error("request",zt.bind(null,r,e)),e.hook.wrap("request",xs.bind(null,r,e))),{retry:{retryRequest:(o,s,i)=>(o.request.request=Object.assign({},o.request.request,{retries:s,retryAfter:i}),o)}}}Kt.VERSION=Hs;var Bs="8.1.2",Ee=()=>Promise.resolve();function Ws(e,t,r){return e.retryLimiter.schedule(Ms,e,t,r)}async function Ms(e,t,r){const o=r.method!=="GET"&&r.method!=="HEAD",{pathname:s}=new URL(r.url,"http://github.test"),i=r.method==="GET"&&s.startsWith("/search/"),u=s.startsWith("/graphql"),g=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(g.expiration=1e3*60),(o||u)&&await e.write.key(e.id).schedule(g,Ee),o&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(g,Ee),i&&await e.search.key(e.id).schedule(g,Ee);const E=e.global.key(e.id).schedule(g,t,r);if(u){const T=await E;if(T.data.errors!=null&&T.data.errors.some(f=>f.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:T,data:T.data})}return E}var Vs=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function zs(e){const r=`^(?:${e.map(o=>o.split("/").map(s=>s.startsWith("{")?"(?:.+?)":s).join("/")).map(o=>`(?:${o})`).join("|")})[^/]*$`;return new RegExp(r,"i")}var lt=zs(Vs),Jt=lt.test.bind(lt),W={},Ks=function(e,t){W.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),W.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),W.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),W.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function Pe(e,t){const{enabled:r=!0,Bottleneck:o=Vt,id:s="no-id",timeout:i=1e3*60*2,connection:u}=t.throttle||{};if(!r)return{};const h={connection:u,timeout:i};W.global==null&&Ks(o,h);const g=Object.assign({clustering:u!=null,triggersNotification:Jt,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:s,...W},t.throttle);if(typeof g.onSecondaryRateLimit!="function"||typeof g.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const E={},T=new o.Events(E);return E.on("secondary-limit",g.onSecondaryRateLimit),E.on("rate-limit",g.onRateLimit),E.on("error",f=>e.log.warn("Error in throttling-plugin limit handler",f)),g.retryLimiter.on("failed",async function(f,S){const[P,F,R]=S.args,{pathname:A}=new URL(R.url,"http://github.test");if(!(A.startsWith("/graphql")&&f.status!==401||f.status===403))return;const y=~~F.retryCount;F.retryCount=y,R.request.retryCount=y;const{wantRetry:G,retryAfter:K=0}=await async function(){var J;if(/\bsecondary rate\b/i.test(f.message)){const D=Number(f.response.headers["retry-after"])||P.fallbackSecondaryRateRetryAfter;return{wantRetry:await T.trigger("secondary-limit",D,R,e,y),retryAfter:D}}if(f.response.headers!=null&&f.response.headers["x-ratelimit-remaining"]==="0"||(((J=f.response.data)==null?void 0:J.errors)??[]).some(D=>D.type==="RATE_LIMITED")){const D=new Date(~~f.response.headers["x-ratelimit-reset"]*1e3).getTime(),N=Math.max(Math.ceil((D-Date.now())/1e3)+1,0);return{wantRetry:await T.trigger("rate-limit",N,R,e,y),retryAfter:N}}return{}}();if(G)return F.retryCount++,K*P.retryAfterBaseValue}),e.hook.wrap("request",Ws.bind(null,g)),{}}Pe.VERSION=Bs;Pe.triggersNotification=Jt;const Js=V(Gr);var Xs=function(t){return btoa(t)};const L=ke(Xs),Ys="4.0.0";function Qs(e){const t=e.clientType||"oauth-app",r=e.baseUrl||"https://github.com",o={clientType:t,allowSignup:e.allowSignup!==!1,clientId:e.clientId,login:e.login||null,redirectUrl:e.redirectUrl||null,state:e.state||Math.random().toString(36).substr(2),url:""};if(t==="oauth-app"){const s="scopes"in e?e.scopes:[];o.scopes=typeof s=="string"?s.split(/[,\s]+/).filter(Boolean):s}return o.url=Zs(`${r}/login/oauth/authorize`,o),o}function Zs(e,t){const r={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let o=e;return Object.keys(r).filter(s=>t[s]!==null).filter(s=>s!=="scopes"?!0:t.clientType==="github-app"?!1:!Array.isArray(t[s])||t[s].length>0).map(s=>[r[s],`${t[s]}`]).forEach(([s,i],u)=>{o+=u===0?"?":"&",o+=`${s}=${encodeURIComponent(i)}`}),o}function Xt(e){const t=e.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(t.baseUrl)?"https://github.com":t.baseUrl.replace("/api/v3","")}async function oe(e,t,r){const o={baseUrl:Xt(e),headers:{accept:"application/json"},...r},s=await e(t,o);if("error"in s.data){const i=new $(`${s.data.error_description} (${s.data.error}, ${s.data.error_uri})`,400,{request:e.endpoint.merge(t,o),headers:s.headers});throw i.response=s,i}return s}function eo({request:e=O,...t}){const r=Xt(e);return Qs({...t,baseUrl:r})}async function Yt(e){const t=e.request||O,r=await oe(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,code:e.code,redirect_uri:e.redirectUrl}),o={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if(e.clientType==="github-app"){if("refresh_token"in r.data){const s=new Date(r.headers.date).getTime();o.refreshToken=r.data.refresh_token,o.expiresAt=pt(s,r.data.expires_in),o.refreshTokenExpiresAt=pt(s,r.data.refresh_token_expires_in)}delete o.scopes}return{...r,authentication:o}}function pt(e,t){return new Date(e+t*1e3).toISOString()}async function Qt(e){const t=e.request||O,r={client_id:e.clientId};return"scopes"in e&&Array.isArray(e.scopes)&&(r.scope=e.scopes.join(" ")),oe(t,"POST /login/device/code",r)}async function we(e){const t=e.request||O,r=await oe(t,"POST /login/oauth/access_token",{client_id:e.clientId,device_code:e.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),o={clientType:e.clientType,clientId:e.clientId,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in e&&(o.clientSecret=e.clientSecret),e.clientType==="github-app"){if("refresh_token"in r.data){const s=new Date(r.headers.date).getTime();o.refreshToken=r.data.refresh_token,o.expiresAt=dt(s,r.data.expires_in),o.refreshTokenExpiresAt=dt(s,r.data.refresh_token_expires_in)}delete o.scopes}return{...r,authentication:o}}function dt(e,t){return new Date(e+t*1e3).toISOString()}async function Zt(e){const r=await(e.request||O)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${L(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token}),o={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.token,scopes:r.data.scopes};return r.data.expires_at&&(o.expiresAt=r.data.expires_at),e.clientType==="github-app"&&delete o.scopes,{...r,authentication:o}}async function er(e){const t=e.request||O,r=await oe(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,grant_type:"refresh_token",refresh_token:e.refreshToken}),o=new Date(r.headers.date).getTime(),s={clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,refreshToken:r.data.refresh_token,expiresAt:ht(o,r.data.expires_in),refreshTokenExpiresAt:ht(o,r.data.refresh_token_expires_in)};return{...r,authentication:s}}function ht(e,t){return new Date(e+t*1e3).toISOString()}async function to(e){const{request:t,clientType:r,clientId:o,clientSecret:s,token:i,...u}=e,g=await(t||O)("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${L(`${o}:${s}`)}`},client_id:o,access_token:i,...u}),E=Object.assign({clientType:r,clientId:o,clientSecret:s,token:g.data.token},g.data.expires_at?{expiresAt:g.data.expires_at}:{});return{...g,authentication:E}}async function tr(e){const t=e.request||O,r=L(`${e.clientId}:${e.clientSecret}`),o=await t("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token}),s={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:o.data.token,scopes:o.data.scopes};return o.data.expires_at&&(s.expiresAt=o.data.expires_at),e.clientType==="github-app"&&delete s.scopes,{...o,authentication:s}}async function rr(e){const t=e.request||O,r=L(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})}async function sr(e){const t=e.request||O,r=L(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})}const ro=Object.freeze(Object.defineProperty({__proto__:null,VERSION:Ys,checkToken:Zt,createDeviceCode:Qt,deleteAuthorization:sr,deleteToken:rr,exchangeDeviceCode:we,exchangeWebFlowCode:Yt,getWebFlowAuthorizationUrl:eo,refreshToken:er,resetToken:tr,scopeToken:to},Symbol.toStringTag,{value:"Module"}));async function or(e,t){const r=so(e,t.auth);if(r)return r;const{data:o}=await Qt({clientType:e.clientType,clientId:e.clientId,request:t.request||e.request,scopes:t.auth.scopes||e.scopes});await e.onVerification(o);const s=await ye(t.request||e.request,e.clientId,e.clientType,o);return e.authentication=s,s}function so(e,t){if(t.refresh===!0||!e.authentication)return!1;if(e.clientType==="github-app")return e.authentication;const r=e.authentication,o=("scopes"in t&&t.scopes||e.scopes).join(" "),s=r.scopes.join(" ");return o===s?r:!1}async function gt(e){await new Promise(t=>setTimeout(t,e*1e3))}async function ye(e,t,r,o){try{const s={clientId:t,request:e,code:o.device_code},{authentication:i}=r==="oauth-app"?await we({...s,clientType:"oauth-app"}):await we({...s,clientType:"github-app"});return{type:"token",tokenType:"oauth",...i}}catch(s){if(!s.response)throw s;const i=s.response.data.error;if(i==="authorization_pending")return await gt(o.interval),ye(e,t,r,o);if(i==="slow_down")return await gt(o.interval+5),ye(e,t,r,o);throw s}}async function oo(e,t){return or(e,{auth:t})}async function no(e,t,r,o){let s=t.endpoint.merge(r,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(s.url))return t(s);const{token:i}=await or(e,{request:t,auth:{type:"oauth"}});return s.headers.authorization=`token ${i}`,t(s)}var io="6.0.1";function ao(e){const t=e.request||O.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${io} ${C()}`}}),{request:r=t,...o}=e,s=e.clientType==="github-app"?{...o,clientType:"github-app",request:r}:{...o,clientType:"oauth-app",request:r,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(oo.bind(null,s),{hook:no.bind(null,s)})}var nr="4.0.1";async function mt(e){if("code"in e.strategyOptions){const{authentication:t}=await Yt({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...t}}if("onVerification"in e.strategyOptions){const r=await ao({clientType:e.clientType,clientId:e.clientId,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request})({type:"oauth"});return{clientSecret:e.clientSecret,...r}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function ve(e,t={}){var o,s;if(e.authentication||(e.authentication=e.clientType==="oauth-app"?await mt(e):await mt(e)),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const r=e.authentication;if("expiresAt"in r&&(t.type==="refresh"||new Date(r.expiresAt)<new Date)){const{authentication:i}=await er({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:r.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...i}}if(t.type==="refresh"){if(e.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!r.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");await((o=e.onTokenCreated)==null?void 0:o.call(e,e.authentication,{type:t.type}))}if(t.type==="check"||t.type==="reset"){const i=t.type==="check"?Zt:tr;try{const{authentication:u}=await i({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...u},t.type==="reset"&&await((s=e.onTokenCreated)==null?void 0:s.call(e,e.authentication,{type:t.type})),e.authentication}catch(u){throw u.status===404&&(u.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),u}}if(t.type==="delete"||t.type==="deleteAuthorization"){const i=t.type==="delete"?rr:sr;try{await i({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(u){if(u.status!==404)throw u}return e.authentication.invalid=!0,e.authentication}return e.authentication}var co=/\/applications\/[^/]+\/(token|grant)s?/;function Re(e){return e&&co.test(e)}async function uo(e,t,r,o={}){const s=t.endpoint.merge(r,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(s.url))return t(s);if(Re(s.url)){const u=L(`${e.clientId}:${e.clientSecret}`);return s.headers.authorization=`basic ${u}`,t(s)}const{token:i}=e.clientType==="oauth-app"?await ve({...e,request:t}):await ve({...e,request:t});return s.headers.authorization="token "+i,t(s)}function Z({clientId:e,clientSecret:t,clientType:r="oauth-app",request:o=O.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${nr} ${C()}`}}),onTokenCreated:s,...i}){const u=Object.assign({clientType:r,clientId:e,clientSecret:t,onTokenCreated:s,strategyOptions:i,request:o});return Object.assign(ve.bind(null,u),{hook:uo.bind(null,u)})}Z.VERSION=nr;const lo=Object.freeze(Object.defineProperty({__proto__:null,createOAuthUserAuth:Z,requiresBasicAuth:Re},Symbol.toStringTag,{value:"Module"}));async function po(e,t){if(t.type==="oauth-app")return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${L(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in t){const{type:s,...i}={...t,...e};return t.factory(i)}const r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...t};return(e.clientType==="oauth-app"?await Z({...r,clientType:e.clientType}):await Z({...r,clientType:e.clientType}))()}async function ho(e,t,r,o){let s=t.endpoint.merge(r,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(s.url))return t(s);if(e.clientType==="github-app"&&!Re(s.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${s.method} ${s.url}" is not supported.`);const i=L(`${e.clientId}:${e.clientSecret}`);s.headers.authorization=`basic ${i}`;try{return await t(s)}catch(u){throw u.status!==401||(u.message=`[@octokit/auth-oauth-app] "${s.method} ${s.url}" does not support clientId/clientSecret basic authentication.`),u}}var go="7.0.1";function mo(e){const t=Object.assign({request:O.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${go} ${C()}`}}),clientType:"oauth-app"},e);return Object.assign(po.bind(null,t),{hook:ho.bind(null,t)})}const _o=Object.freeze(Object.defineProperty({__proto__:null,createOAuthAppAuth:mo,createOAuthUserAuth:Z},Symbol.toStringTag,{value:"Module"})),ir=V(_o),ne=V(lo),To=V(bs),x=V(ro);async function Eo(e){return{type:"unauthenticated",reason:e}}function fo(e){return e.status!==403||!e.response?!1:e.response.headers["x-ratelimit-remaining"]==="0"}var bo=/\babuse\b/i;function wo(e){return e.status!==403?!1:bo.test(e.message)}async function yo(e,t,r,o){const s=t.endpoint.merge(r,o);return t(s).catch(i=>{throw i.status===404?(i.message=`Not found. May be due to lack of authentication. Reason: ${e}`,i):fo(i)?(i.message=`API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${e}`,i):wo(i)?(i.message=`You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${e}`,i):i.status===401?(i.message=`Unauthorized. "${s.method} ${s.url}" failed most likely due to lack of authentication. Reason: ${e}`,i):(i.status>=400&&i.status<500&&(i.message=i.message.replace(/\.?$/,`. May be caused by lack of authentication (${e}).`)),i)})}var vo=function(t){if(!t||!t.reason)throw new Error("[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth");return Object.assign(Eo.bind(null,t.reason),{hook:yo.bind(null,t.reason)})};const ko=Object.freeze(Object.defineProperty({__proto__:null,createUnauthenticatedAuth:vo},Symbol.toStringTag,{value:"Module"})),ar=V(ko);var Oo=Object.create,ie=Object.defineProperty,Ao=Object.getOwnPropertyDescriptor,So=Object.getOwnPropertyNames,Po=Object.getPrototypeOf,Ro=Object.prototype.hasOwnProperty,Go=(e,t)=>{for(var r in t)ie(e,r,{get:t[r],enumerable:!0})},cr=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of So(t))!Ro.call(e,s)&&s!==r&&ie(e,s,{get:()=>t[s],enumerable:!(o=Ao(t,s))||o.enumerable});return e},j=(e,t,r)=>(r=e!=null?Oo(Po(e)):{},cr(t||!e||!e.__esModule?ie(r,"default",{value:e,enumerable:!0}):r,e)),Uo=e=>cr(ie({},"__esModule",{value:!0}),e),ur={};Go(ur,{OAuthApp:()=>ln,createAWSLambdaAPIGatewayV2Handler:()=>un,createNodeMiddleware:()=>rn,createWebWorkerHandler:()=>nn,handleRequest:()=>ae,sendNodeResponse:()=>hr,unknownRouteResponse:()=>dr});var Io=Uo(ur),Fo=ir,lr="6.0.0";function pr(e,t,r){if(Array.isArray(t)){for(const o of t)pr(e,o,r);return}e.eventHandlers[t]||(e.eventHandlers[t]=[]),e.eventHandlers[t].push(r)}var Do=To,Co=Js,Lo=Do.Octokit.defaults({userAgent:`octokit-oauth-app.js/${lr} ${(0,Co.getUserAgent)()}`}),jo=ne;async function I(e,t){const{name:r,action:o}=t;if(e.eventHandlers[`${r}.${o}`])for(const s of e.eventHandlers[`${r}.${o}`])await s(t);if(e.eventHandlers[r])for(const s of e.eventHandlers[r])await s(t)}async function $o(e,t){return e.octokit.auth({type:"oauth-user",...t,async factory(r){const o=new e.Octokit({authStrategy:jo.createOAuthUserAuth,auth:r}),s=await o.auth({type:"get"});return await I(e,{name:"token",action:"created",token:s.token,scopes:s.scopes,authentication:s,octokit:o}),o}})}var qo=j(x);function xo(e,t){const r={clientId:e.clientId,request:e.octokit.request,...t,allowSignup:e.allowSignup??t.allowSignup,redirectUrl:t.redirectUrl??e.redirectUrl,scopes:t.scopes??e.defaultScopes};return qo.getWebFlowAuthorizationUrl({clientType:e.clientType,...r})}var No=j(ir);async function Ho(e,t){const r=await e.octokit.auth({type:"oauth-user",...t});return await I(e,{name:"token",action:"created",token:r.token,scopes:r.scopes,authentication:r,octokit:new e.Octokit({authStrategy:No.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.token,scopes:r.scopes,refreshToken:r.refreshToken,expiresAt:r.expiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}})}),{authentication:r}}var Bo=j(x);async function Wo(e,t){const r=await Bo.checkToken({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t});return Object.assign(r.authentication,{type:"token",tokenType:"oauth"}),r}var _t=j(x),Tt=ne;async function Mo(e,t){const r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t};if(e.clientType==="oauth-app"){const i=await _t.resetToken({clientType:"oauth-app",...r}),u=Object.assign(i.authentication,{type:"token",tokenType:"oauth"});return await I(e,{name:"token",action:"reset",token:i.authentication.token,scopes:i.authentication.scopes||void 0,authentication:u,octokit:new e.Octokit({authStrategy:Tt.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:i.authentication.token,scopes:i.authentication.scopes}})}),{...i,authentication:u}}const o=await _t.resetToken({clientType:"github-app",...r}),s=Object.assign(o.authentication,{type:"token",tokenType:"oauth"});return await I(e,{name:"token",action:"reset",token:o.authentication.token,authentication:s,octokit:new e.Octokit({authStrategy:Tt.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:o.authentication.token}})}),{...o,authentication:s}}var Vo=j(x),zo=ne;async function Ko(e,t){if(e.clientType==="oauth-app")throw new Error("[@octokit/oauth-app] app.refreshToken() is not supported for OAuth Apps");const r=await Vo.refreshToken({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,refreshToken:t.refreshToken}),o=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return await I(e,{name:"token",action:"refreshed",token:r.authentication.token,authentication:o,octokit:new e.Octokit({authStrategy:zo.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),{...r,authentication:o}}var Jo=j(x),Xo=ne;async function Yo(e,t){if(e.clientType==="oauth-app")throw new Error("[@octokit/oauth-app] app.scopeToken() is not supported for OAuth Apps");const r=await Jo.scopeToken({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t}),o=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return await I(e,{name:"token",action:"scoped",token:r.authentication.token,authentication:o,octokit:new e.Octokit({authStrategy:Xo.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),{...r,authentication:o}}var Et=j(x),Qo=ar;async function Zo(e,t){const r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},o=e.clientType==="oauth-app"?await Et.deleteToken({clientType:"oauth-app",...r}):await Et.deleteToken({clientType:"github-app",...r});return await I(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Qo.createUnauthenticatedAuth,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),o}var ft=j(x),bt=ar;async function en(e,t){const r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},o=e.clientType==="oauth-app"?await ft.deleteAuthorization({clientType:"oauth-app",...r}):await ft.deleteAuthorization({clientType:"github-app",...r});return await I(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:bt.createUnauthenticatedAuth,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),await I(e,{name:"authorization",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:bt.createUnauthenticatedAuth,auth:{reason:'Handling "authorization.deleted" event. The access for the app has been revoked.'}})}),o}function dr(e){return{status:404,headers:{"content-type":"application/json"},text:JSON.stringify({error:`Unknown route: ${e.method} ${e.url}`})}}async function ae(e,{pathPrefix:t="/api/github/oauth"},r){var T,f,S,P,F,R;if(r.method==="OPTIONS")return{status:200,headers:{"access-control-allow-origin":"*","access-control-allow-methods":"*","access-control-allow-headers":"Content-Type, User-Agent, Authorization"}};let{pathname:o}=new URL(r.url,"http://localhost");if(!o.startsWith(`${t}/`))return;o=o.slice(t.length+1);const s=[r.method,o].join(" "),i={getLogin:"GET login",getCallback:"GET callback",createToken:"POST token",getToken:"GET token",patchToken:"PATCH token",patchRefreshToken:"PATCH refresh-token",scopeToken:"POST token/scoped",deleteToken:"DELETE token",deleteGrant:"DELETE grant"};if(!Object.values(i).includes(s))return dr(r);let u;try{const A=await r.text();u=A?JSON.parse(A):{}}catch{return{status:400,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify({error:"[@octokit/oauth-app] request error"})}}const{searchParams:h}=new URL(r.url,"http://localhost"),g=Object.fromEntries(h),E=r.headers;try{if(s===i.getLogin){const{url:w}=e.getWebFlowAuthorizationUrl({state:g.state,scopes:g.scopes?g.scopes.split(","):void 0,allowSignup:g.allowSignup?g.allowSignup==="true":void 0,redirectUrl:g.redirectUrl});return{status:302,headers:{location:w}}}if(s===i.getCallback){if(g.error)throw new Error(`[@octokit/oauth-app] ${g.error} ${g.error_description}`);if(!g.code)throw new Error('[@octokit/oauth-app] "code" parameter is required');const{authentication:{token:w}}=await e.createToken({code:g.code});return{status:200,headers:{"content-type":"text/html"},text:`<h1>Token created successfully</h1>

<p>Your token is: <strong>${w}</strong>. Copy it now as it cannot be shown again.</p>`}}if(s===i.createToken){const{code:w,redirectUrl:y}=u;if(!w)throw new Error('[@octokit/oauth-app] "code" parameter is required');const G=await e.createToken({code:w,redirectUrl:y});return delete G.authentication.clientSecret,{status:201,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(G)}}if(s===i.getToken){const w=(T=E.authorization)==null?void 0:T.substr(6);if(!w)throw new Error('[@octokit/oauth-app] "Authorization" header is required');const y=await e.checkToken({token:w});return delete y.authentication.clientSecret,{status:200,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(y)}}if(s===i.patchToken){const w=(f=E.authorization)==null?void 0:f.substr(6);if(!w)throw new Error('[@octokit/oauth-app] "Authorization" header is required');const y=await e.resetToken({token:w});return delete y.authentication.clientSecret,{status:200,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(y)}}if(s===i.patchRefreshToken){if(!((S=E.authorization)==null?void 0:S.substr(6)))throw new Error('[@octokit/oauth-app] "Authorization" header is required');const{refreshToken:y}=u;if(!y)throw new Error("[@octokit/oauth-app] refreshToken must be sent in request body");const G=await e.refreshToken({refreshToken:y});return delete G.authentication.clientSecret,{status:200,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(G)}}if(s===i.scopeToken){const w=(P=E.authorization)==null?void 0:P.substr(6);if(!w)throw new Error('[@octokit/oauth-app] "Authorization" header is required');const y=await e.scopeToken({token:w,...u});return delete y.authentication.clientSecret,{status:200,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(y)}}if(s===i.deleteToken){const w=(F=E.authorization)==null?void 0:F.substr(6);if(!w)throw new Error('[@octokit/oauth-app] "Authorization" header is required');return await e.deleteToken({token:w}),{status:204,headers:{"access-control-allow-origin":"*"}}}const A=(R=E.authorization)==null?void 0:R.substr(6);if(!A)throw new Error('[@octokit/oauth-app] "Authorization" header is required');return await e.deleteAuthorization({token:A}),{status:204,headers:{"access-control-allow-origin":"*"}}}catch(A){return{status:400,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify({error:A.message})}}}function tn(e){const{method:t,url:r,headers:o}=e;async function s(){return await new Promise((u,h)=>{let g=[];e.on("error",h).on("data",E=>g.push(E)).on("end",()=>u(Buffer.concat(g).toString()))})}return{method:t,url:r,headers:o,text:s}}function hr(e,t){t.writeHead(e.status,e.headers),t.end(e.text)}function rn(e,t={}){return async function(r,o,s){const i=await tn(r),u=await ae(e,t,i);return u?(hr(u,o),!0):(s==null||s(),!1)}}function sn(e){const t=Object.fromEntries(e.headers.entries());return{method:e.method,url:e.url,headers:t,text:()=>e.text()}}function on(e){return new Response(e.text,{status:e.status,headers:e.headers})}function nn(e,t={}){return async function(r){const o=await sn(r),s=await ae(e,t,o);return s?on(s):void 0}}function an(e){const{method:t}=e.requestContext.http;let r=e.rawPath;const{stage:o}=e.requestContext;r.startsWith("/"+o)&&(r=r.substring(o.length+1)),e.rawQueryString&&(r+="?"+e.rawQueryString);const s=e.headers;return{method:t,url:r,headers:s,text:async()=>e.body||""}}function cn(e){return{statusCode:e.status,headers:e.headers,body:e.text}}function un(e,t={}){return async function(r){const o=an(r),s=await ae(e,t,o);return s?cn(s):void 0}}var ee,ln=(ee=class{static defaults(t){return class extends this{constructor(...o){super({...t,...o[0]})}}}constructor(t){const r=t.Octokit||Lo;this.type=t.clientType||"oauth-app";const o=new r({authStrategy:Fo.createOAuthAppAuth,auth:{clientType:this.type,clientId:t.clientId,clientSecret:t.clientSecret}}),s={clientType:this.type,clientId:t.clientId,clientSecret:t.clientSecret,defaultScopes:t.defaultScopes||[],allowSignup:t.allowSignup,baseUrl:t.baseUrl,redirectUrl:t.redirectUrl,log:t.log,Octokit:r,octokit:o,eventHandlers:{}};this.on=pr.bind(null,s),this.octokit=o,this.getUserOctokit=$o.bind(null,s),this.getWebFlowAuthorizationUrl=xo.bind(null,s),this.createToken=Ho.bind(null,s),this.checkToken=Wo.bind(null,s),this.resetToken=Mo.bind(null,s),this.refreshToken=Ko.bind(null,s),this.scopeToken=Yo.bind(null,s),this.deleteToken=Zo.bind(null,s),this.deleteAuthorization=en.bind(null,s)}},ee.VERSION=lr,ee),pn="3.1.1",gr=Lt.plugin(Wt,qt,Is,Kt,Pe).defaults({userAgent:`octokit.js/${pn}`,throttle:{onRateLimit:dn,onSecondaryRateLimit:hn}});function dn(e,t,r){if(r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}function hn(e,t,r){if(r.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}Io.OAuthApp.defaults({Octokit:gr});const gn={class:"action"},mn=Sr({__name:"HelloWorld",setup(e){const t=new gr({auth:{}.VITE_TOKEN||{GITHUB_STATE:"/home/runner/work/_temp/_runner_file_commands/save_state_ca9800ff-74d9-4e3b-a8f6-fe489ed8f8e2",npm_package_devDependencies__types_node:"^20.9.0",STATS_TRP:"true",DEPLOYMENT_BASEPATH:"/opt/runner",DOTNET_NOLOGO:"1",USER:"runner",npm_package_scripts_docs_build:"vitepress build docs",npm_config_user_agent:"pnpm/8.10.2 npm/? node/v18.18.2 linux x64",CI:"true",npm_package_dependencies_octokit:"^3.1.1",RUNNER_ENVIRONMENT:"github-hosted",GITHUB_ENV:"/home/runner/work/_temp/_runner_file_commands/set_env_ca9800ff-74d9-4e3b-a8f6-fe489ed8f8e2",PIPX_HOME:"/opt/pipx",npm_package_devDependencies_vite:"^4.5.0",npm_node_execpath:"/opt/hostedtoolcache/node/18.18.2/x64/bin/node",JAVA_HOME_8_X64:"/usr/lib/jvm/temurin-8-jdk-amd64",SHLVL:"1",HOME:"/home/runner",RUNNER_TEMP:"/home/runner/work/_temp",GITHUB_EVENT_PATH:"/home/runner/work/_temp/_github_workflow/event.json",JAVA_HOME_11_X64:"/usr/lib/jvm/temurin-11-jdk-amd64",PIPX_BIN_DIR:"/opt/pipx_bin",GITHUB_REPOSITORY_OWNER:"ZXinL-CN",GRADLE_HOME:"/usr/share/gradle-8.4",ANDROID_NDK_LATEST_HOME:"/usr/local/lib/android/sdk/ndk/26.1.10909125",JAVA_HOME_21_X64:"/usr/lib/jvm/temurin-21-jdk-amd64",STATS_RDCL:"true",GITHUB_RETENTION_DAYS:"90",GITHUB_REPOSITORY_OWNER_ID:"53359921",POWERSHELL_DISTRIBUTION_CHANNEL:"GitHub-Actions-ubuntu22",AZURE_EXTENSION_DIR:"/opt/az/azcliextensions",GITHUB_HEAD_REF:"",npm_package_scripts_docs_preview:"vitepress preview docs",SYSTEMD_EXEC_PID:"577",GITHUB_GRAPHQL_URL:"https://api.github.com/graphql",npm_package_description:"",npm_package_devDependencies_typescript:"^5.2.2",GOROOT_1_20_X64:"/opt/hostedtoolcache/go/1.20.10/x64",NVM_DIR:"/home/runner/.nvm",DOTNET_SKIP_FIRST_TIME_EXPERIENCE:"1",GOROOT_1_21_X64:"/opt/hostedtoolcache/go/1.21.3/x64",JAVA_HOME_17_X64:"/usr/lib/jvm/temurin-17-jdk-amd64",ImageVersion:"20231030.2.0",RUNNER_OS:"Linux",GITHUB_API_URL:"https://api.github.com",SWIFT_PATH:"/usr/share/swift/usr/bin",npm_package_type:"module",npm_package_devDependencies_vitepress:"1.0.0-rc.22",RUNNER_USER:"runner",STATS_V3PS:"true",CHROMEWEBDRIVER:"/usr/local/share/chromedriver-linux64",JOURNAL_STREAM:"8:16986",GITHUB_WORKFLOW:"Build and Deploy Docs",_:"/home/runner/setup-pnpm/node_modules/.bin/pnpm",npm_config_registry:"https://registry.npmjs.org/",ACTIONS_RUNNER_ACTION_ARCHIVE_CACHE:"/opt/actionarchivecache",GITHUB_RUN_ID:"6795100887",GITHUB_REF_TYPE:"branch",BOOTSTRAP_HASKELL_NONINTERACTIVE:"1",GITHUB_WORKFLOW_SHA:"f4c0d603e6aa1909c720a3aca7e6a5550920ba04",GITHUB_BASE_REF:"",ImageOS:"ubuntu22",STATS_BLT:"true",GITHUB_WORKFLOW_REF:"ZXinL-CN/ictc_cms/.github/workflows/build-docs.yml@refs/heads/main",PERFLOG_LOCATION_SETTING:"RUNNER_PERFLOG",GITHUB_ACTION_REPOSITORY:"",npm_config_node_gyp:"/home/runner/setup-pnpm/node_modules/.pnpm/pnpm@8.10.2/node_modules/pnpm/dist/node_modules/node-gyp/bin/node-gyp.js",PATH:"/home/runner/work/ictc_cms/ictc_cms/node_modules/.bin:/home/runner/setup-pnpm/node_modules/.pnpm/pnpm@8.10.2/node_modules/pnpm/dist/node-gyp-bin:/home/runner/setup-pnpm/node_modules/.bin:/opt/hostedtoolcache/node/18.18.2/x64/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/snap/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",ANT_HOME:"/usr/share/ant",DOTNET_MULTILEVEL_LOOKUP:"0",RUNNER_TRACKING_ID:"github_96871c2e-82f0-4f79-be65-93be3e1af017",INVOCATION_ID:"a252308e0bc046eebca390a944bca500",RUNNER_TOOL_CACHE:"/opt/hostedtoolcache",GOROOT_1_19_X64:"/opt/hostedtoolcache/go/1.19.13/x64",npm_package_name:"ictc_cms",NODE:"/opt/hostedtoolcache/node/18.18.2/x64/bin/node",GITHUB_ACTION:"__run_2",GITHUB_RUN_NUMBER:"3",GITHUB_TRIGGERING_ACTOR:"ZXinL-CN",RUNNER_ARCH:"X64",XDG_RUNTIME_DIR:"/run/user/1001",AGENT_TOOLSDIRECTORY:"/opt/hostedtoolcache",npm_config_frozen_lockfile:"",LANG:"C.UTF-8",VCPKG_INSTALLATION_ROOT:"/usr/local/share/vcpkg",CONDA:"/usr/share/miniconda",RUNNER_NAME:"GitHub Actions 2",XDG_CONFIG_HOME:"/home/runner/.config",STATS_VMD:"true",GITHUB_REF_NAME:"main",GITHUB_REPOSITORY:"ZXinL-CN/ictc_cms",npm_package_main:"index.js",npm_lifecycle_script:"vitepress build docs",STATS_UE:"true",ANDROID_NDK_ROOT:"/usr/local/lib/android/sdk/ndk/25.2.9519653",GITHUB_ACTION_REF:"",DEBIAN_FRONTEND:"noninteractive",GITHUB_REPOSITORY_ID:"705209127",GITHUB_ACTIONS:"true",STATS_NM:"true",NODE_PATH:"/home/runner/work/ictc_cms/ictc_cms/node_modules/.pnpm/vitepress@1.0.0-rc.22_@algolia+client-search@4.20.0_@types+node@20.9.0_search-insights@2.9.0/node_modules/vitepress/bin/node_modules:/home/runner/work/ictc_cms/ictc_cms/node_modules/.pnpm/vitepress@1.0.0-rc.22_@algolia+client-search@4.20.0_@types+node@20.9.0_search-insights@2.9.0/node_modules/vitepress/node_modules:/home/runner/work/ictc_cms/ictc_cms/node_modules/.pnpm/vitepress@1.0.0-rc.22_@algolia+client-search@4.20.0_@types+node@20.9.0_search-insights@2.9.0/node_modules:/home/runner/work/ictc_cms/ictc_cms/node_modules/.pnpm/node_modules:/home/runner/setup-pnpm/node_modules/.pnpm/pnpm@8.10.2/node_modules/pnpm/bin/node_modules:/home/runner/setup-pnpm/node_modules/.pnpm/pnpm@8.10.2/node_modules/pnpm/node_modules:/home/runner/setup-pnpm/node_modules/.pnpm/pnpm@8.10.2/node_modules:/home/runner/setup-pnpm/node_modules/.pnpm/node_modules:/home/runner/setup-pnpm/node_modules:/home/runner/node_modules:/home/node_modules:/node_modules:/home/runner/setup-pnpm/node_modules/pnpm/bin/node_modules:/home/runner/setup-pnpm/node_modules/pnpm/node_modules",npm_package_version:"1.0.0",npm_package_scripts_docs_dev:"vitepress dev docs",npm_lifecycle_event:"docs:build",GITHUB_REF_PROTECTED:"false",GITHUB_WORKSPACE:"/home/runner/work/ictc_cms/ictc_cms",ACCEPT_EULA:"Y",GITHUB_JOB:"build-and-deploy",RUNNER_PERFLOG:"/home/runner/perflog",npm_package_author:"",GITHUB_SHA:"f4c0d603e6aa1909c720a3aca7e6a5550920ba04",GITHUB_RUN_ATTEMPT:"1",GITHUB_REF:"refs/heads/main",GITHUB_ACTOR:"ZXinL-CN",ANDROID_SDK_ROOT:"/usr/local/lib/android/sdk",npm_package_license:"ISC",LEIN_HOME:"/usr/local/lib/lein",GITHUB_PATH:"/home/runner/work/_temp/_runner_file_commands/add_path_ca9800ff-74d9-4e3b-a8f6-fe489ed8f8e2",JAVA_HOME:"/usr/lib/jvm/temurin-11-jdk-amd64",PWD:"/home/runner/work/ictc_cms/ictc_cms",GITHUB_ACTOR_ID:"53359921",RUNNER_WORKSPACE:"/home/runner/work/ictc_cms",npm_execpath:"/home/runner/setup-pnpm/node_modules/.pnpm/pnpm@8.10.2/node_modules/pnpm/bin/pnpm.cjs",HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS:"3650",STATS_TIS:"mining",GITHUB_EVENT_NAME:"push",HOMEBREW_NO_AUTO_UPDATE:"1",ANDROID_HOME:"/usr/local/lib/android/sdk",GITHUB_SERVER_URL:"https://github.com",GECKOWEBDRIVER:"/usr/local/share/gecko_driver",LEIN_JAR:"/usr/local/lib/lein/self-installs/leiningen-2.10.0-standalone.jar",GHCUP_INSTALL_BASE_PREFIX:"/usr/local",GITHUB_OUTPUT:"/home/runner/work/_temp/_runner_file_commands/set_output_ca9800ff-74d9-4e3b-a8f6-fe489ed8f8e2",EDGEWEBDRIVER:"/usr/local/share/edge_driver",STATS_EXT:"true",npm_command:"run-script",PNPM_SCRIPT_SRC_DIR:"/home/runner/work/ictc_cms/ictc_cms",ANDROID_NDK:"/usr/local/lib/android/sdk/ndk/25.2.9519653",SGX_AESM_ADDR:"1",CHROME_BIN:"/usr/bin/google-chrome",SELENIUM_JAR_PATH:"/usr/share/java/selenium-server.jar",PNPM_HOME:"/home/runner/setup-pnpm/node_modules/.bin",STATS_EXTP:"https://provjobdsettingscdn.blob.core.windows.net/settings/provjobdsettings-0.5.154/provjobd.data",ANDROID_NDK_HOME:"/usr/local/lib/android/sdk/ndk/25.2.9519653",GITHUB_STEP_SUMMARY:"/home/runner/work/_temp/_runner_file_commands/step_summary_ca9800ff-74d9-4e3b-a8f6-fe489ed8f8e2",INIT_CWD:"/home/runner/work/ictc_cms/ictc_cms",NODE_ENV:"production"}.TOKEN}),r=async()=>{console.log("onClick");const o=await t.request("GET /repos/{owner}/{repo}/issues",{owner:"ZXinL-CN",repo:"ictc_cms"});console.log(o)};return(o,s)=>(wt(),yt("div",gn,[Pr("a",{class:"VPButton medium alt",onClick:s[0]||(s[0]=i=>r())},"click")]))}}),An=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"ICTC CMS","text":"A CMS Stie","tagline":"My great project tagline","actions":[{"theme":"brand","text":"Markdown Examples","link":"/markdown-examples"},{"theme":"alt","text":"API Examples","link":"/api-examples"}]},"features":[{"title":"Feature A","details":"Lorem ipsum dolor sit amet, consectetur adipiscing elit"},{"title":"Feature B","details":"Lorem ipsum dolor sit amet, consectetur adipiscing elit"},{"title":"Feature C","details":"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),_n={name:"index.md"},Sn=Object.assign(_n,{setup(e){return(t,r)=>(wt(),yt("div",null,[Rr(mn)]))}});export{An as __pageData,Sn as default};
